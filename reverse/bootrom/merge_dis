#!/bin/ruby

# merge_dis  Tom Trebisky  7-7-2018
#
# On 7-6-2018, I copied my multipass disassembler
#  from the esp32 bootrom project to this project and
#  ran it on the esp8266 bootrom image.
#
# This produces a much nicer raw disassembly in many ways.
# However, I have a significant amount of hand generated
# annotation in the old disassembly file and I don't want
# to lose it.  I also don't want to transfer it by hand,
# hence this program.
#
# At this time, the number of lines involved are:
#
#   24773 - old file
#   22439 - new file
#    2816 - lines with comments in old file.

$old_file = "boot_OLD.txt"
$new_file = "new.dis"

$old = File.new $old_file
$new = File.new $new_file

# Augment this with some convenience methods
class Integer
    def hex
        "%08x" % self
    end
    def xhex
        "0x%08x" % self
    end
end

class Line
	attr_reader :raw
	attr_reader :is_dis
	attr_reader :not_dis
	attr_reader :eof
	attr_reader :addr
	attr_reader :comment
	attr_accessor :chatter

	def initializeX ( arg )
	    puts arg
	end

	def initialize ( x )
	    @raw = x
	    @chatter = nil
	    @eof = x == nil
	    @is_dis = false
	    @not_dis = true
	    @comment = false
	    if x =~ /^4000....:/
		@is_dis = true
		@not_dis = false
	    end
	    if @is_dis
		@addr = x.hex
		if x =~ /;/
		    @comment = x.sub /^[^;]*/, ""
		end
	    end
	end
end

# Avoid chomping the nil that indicates EOF
def reader ( file )
	l = file.gets
	if l
	    return Line.new l.chomp
	else
	    return Line.new l
	end
end

def r_old
	return reader $old
end

def r_new
	return reader $new
end

# ----------------------------------------

# We stash any chatter prior to the line so we can output it
# right before (and along with) the line in question
def get_new
	chatter = Array.new

	new = r_new
	while new.not_dis
	    chatter << new.raw if new.raw !~ /^\*\*\*/
	    new = r_new
	end


	new.chatter = chatter
	return new
end

# Move through old file, copying comments
# return with next old instruction
def old_comments
	# copy comments
	loop {
	    $old_line = r_old
	    break if $old_line.eof

		# copy all comments, but skip labels
	    if $old_line.not_dis
		if $old_line.raw !~ />:/
		    puts $old_line.raw
		end
		next
	    end

	    break if $old_line.addr >= $new_line.addr
	}
end

def add_comment

	# A mismatch usually indicates a mangled section
	# in the old file, so we ignore the bogus comment,
	# and write the new line as is.
	if $old_line.addr != $new_line.addr
#	    puts "Whaa - OLD: " + $old_line.raw
#	    puts "Whaa - NEW: " + $new_line.raw
	    return $new_line.raw
	end

	unless $old_line.comment
	    return $new_line.raw
	end

	# Skip old style l32r annotations
	# Some of these had "extra" stuff at the end.
	#  that we want to preserve.
	if $old_line.comment =~ /^; \( /
	    extra = $old_line.comment.sub /^;.*\)/,""
	    if extra == ""
		return $new_line.raw
	    end
	    #print "EXTRA: " + $new_line.raw + " -- " + extra + "\n"
	    return $new_line.raw + " -- " + extra + "\n"
	end

	# Append the old comment
	return $new_line.raw + "\t\t" + $old_line.comment + "\n"
end

def write_line
	$new_line.chatter.each { |c|
	    puts c
	}
	puts add_comment
end

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------

# Let the new file drive the process.

loop {
	$new_line = get_new
	break if $new_line.addr > 0x4000e326

	old_comments

	write_line
}

# THE END
